---
- name: gather info
  hosts: localhost
  tasks:
    - name: gathering terraform outputs
      terraform_backend_info:
        bucket: "{{ aws_bucket }}"
        object: "olympus-v2"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_access_key: "{{ aws_secret_access_key }}"
        aws_region: "{{ aws_region }}"
      become: false
      register: "olympus_v2"
      tags:
        - always
        - terraform_backend_info

    - name: show terraform outputs
      debug:
        var: olympus_v2
      tags:
        - terraform_backend_info

- name: host preparation
  hosts: all
  gather_facts: true
  become: true
  handlers:
    - import_tasks: ./handlers/main.yml
  vars:
    _olympus_v2: "{{ hostvars['localhost']['olympus_v2']['vars'] }}"
  tasks:
    - name: set correct timezone
      community.general.timezone:
        name: America/New_York
      tags:
        - always

    - name: set correct hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
        use: systemd
      tags:
        - always

    # TODO: Move this service template so that it points to the correct binary download based on arch.
    - name: place network environment file
      ansible.builtin.template:
        src: "./templates/network-env.j2"
        dest: "/etc/systemd/system/setup-network-environment.service"
        mode: 0644
      notify:
        - reload systemd

    - name: force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    # - name: Enable and start network environment service
    #   ansible.builtin.systemd:
    #     name: setup-network-environment.service
    #     state: started
    #     enabled: true

    # - name: install packages only when the apt process is not locked
    #   ansible.builtin.apt:
    #     name: "{{ item }}"
    #     state: present
    #     update_cache: true
    #     cache_valid_time: 3600
    #     autoremove: true
    #     autoclean: true
    #   register: apt_action
    #   retries: 100
    #   until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
    #   loop:
    #     - python3-pip
    #     - net-tools
    #   tags:
    #     - always

    # - name: ensure pip packages are installed
    #   ansible.builtin.pip:
    #     name: boto3
    #     executable: pip3
    #     umask: "0022"
    #   tags:
    #     - terraform_backend_info

    - name: install ddclient
      ansible.builtin.import_role:
        name: ddclient_install
      when: install_ddclient
      tags:
        - ddclient-install

    - name: install certbot
      ansible.builtin.import_role:
        name: certbot_install
      when: install_certbot
      tags:
        - certbot-install

    - name: install ubnt
      ansible.builtin.import_role:
        name: ubnt_install
      when: "'ubnt_servers' in group_names"
      tags:
        - ubnt-install

    - name: install cloudflare tunnel
      ansible.builtin.import_role:
        name: cloudflare_tunnel
      when: "'cloudflared_nodes' in group_names"
      tags:
        - cloudflare-install
        - cf-install

    - name: install vault cluster
      ansible.builtin.import_role:
        name: vault_install
      when: "'vault_servers' in group_names"
      vars:
        vault_certs: "{{ _olympus_v2['vault_hosts'] }}"
        vault_ca: "{{ _olympus_v2['hashi_cas']['vault_ca'] }}"
      tags:
        - vault-install
        - hashi-stack

    - name: install consul cluster
      ansible.builtin.import_role:
        name: consul_install
      when: "'consul_servers' in group_names"
      tags:
        - consul-install
        - hashi-stack

    - name: install nomad cluster
      ansible.builtin.import_role:
        name: nomad_install
      when: "'nomad_servers' in group_names"
      tags:
        - nomad-install
        - hashi-stack

- name: initialize vault cluster
  hosts: vault_servers
  gather_facts: true
  become: true
  roles:
    - vault_init
  tags:
    - vault-init

- name: unseal vault cluster
  hosts: vault_servers
  gather_facts: true
  become: true
  roles:
    - vault_unseal
  tags:
    - vault-unseal

- name: install nomad & consul agents on application servers
  hosts: app_servers
  gather_facts: true
  become: true
  handlers:
    - import_tasks: ./handlers/main.yml
