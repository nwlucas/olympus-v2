---
- name: fact and backend gathering
  hosts: all
  gather_facts: true
  become: true
  handlers:
    - name: import handlers
      ansible.builtin.import_tasks: ./handlers/main.yml
  tasks:
    - name: Gather facts from ALL hosts (regardless of limit or tags)
      ansible.builtin.setup:
      tags:
        - always

    - name: install packages only when the apt process is not locked
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
        cache_valid_time: 3600
        autoremove: true
        autoclean: true
      register: apt_action
      retries: 100
      until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
      loop:
        - python3-pip
        - net-tools
        - dmidecode
      tags:
        - always

    - name: ensure pip packages are installed
      ansible.builtin.pip:
        name: boto3
        executable: pip3
        umask: "0022"
      tags:
        - always

    - name: gathering terraform outputs
      terraform_backend_info:
        bucket: "{{ aws_bucket }}"
        object: "olympus-v2"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_access_key: "{{ aws_secret_access_key }}"
        aws_region: "{{ aws_region }}"
      become: false
      register: "olympus_v2"
      tags:
        - always
        - terraform_backend_info

    - name: set facts from backend info
      ansible.builtin.set_fact:
        _olympus_v2: "{{ olympus_v2['vars'] }}"
      check_mode: false
      tags:
        - always

    - name: print terraform outputs
      ansible.builtin.copy:
        content: "{{ _olympus_v2 | to_nice_json }}"
        dest: "./backend_info/{{ inventory_hostname }}.json"
        mode: "0744"
      when: print_terraform_backend
      delegate_to: localhost
      become: false
      check_mode: false
      tags:
        - terraform_backend_info

    - name: show terraform outputs
      ansible.builtin.debug:
        var: olympus_v2
      when: terraform_backend_debug is defined and terraform_backend_debug
      check_mode: false
      tags:
        - terraform_backend_info

- name: host preparation
  hosts: all
  gather_facts: true
  become: true
  handlers:
    - name: import handlers
      ansible.builtin.import_tasks: ./handlers/main.yml
  pre_tasks:
    - name: add authorized keys
      ansible.posix.authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ _olympus_v2['ssh_key']['pub'] }}"
      loop:
        - "ubuntu"
      tags:
        - ssh-keys

    - name: set correct timezone
      community.general.timezone:
        name: America/New_York
      tags:
        - always

    - name: set correct hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
        use: systemd
      tags:
        - always

    # TODO: Move this service template so that it points to the correct binary download based on arch.
    - name: place network environment file
      ansible.builtin.template:
        src: "./templates/network-env.j2"
        dest: "/etc/systemd/system/setup-network-environment.service"
        mode: 0644
      notify:
        - reload systemd

    - name: place CNI plugins
      block:
        - name: make CNI directories
          ansible.builtin.file:
            path: "{{ item.dir }}"
            owner: "{{ item.owner }}"
            group: "{{ item.group }}"
            mode: "{{ item.mode }}"
            state: directory
          loop:
            - dir: "/opt/cni/bin"
              owner: "root"
              group: "root"
              mode: "0755"
            - dir: "/etc/cni/net.d"
              owner: "root"
              group: "root"
              mode: "0755"

        - name: get and extract CNI binaries
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ cni['url'] }}v{{ cni['version'] }}/cni-plugins-{{ ansible_facts['system']|lower }}-{%- if ansible_facts['architecture'] == 'aarch64' %}arm64{%- else %}amd64{%- endif %}-v{{ cni['version'] }}.tgz"
            dest: "/opt/cni/bin"
          tags:
            - skip_ansible_lint
      tags:
        - install-cni

    - name: install prerequisites
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: true
        autoremove: true
        autoclean: true
      loop: "{{ hostprep_install_dependencies | default([]) }}"
      tags:
        - install-host-prereqs

    - name: force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    # - name: Enable and start network environment service
    #   ansible.builtin.systemd:
    #     name: setup-network-environment.service
    #     state: started
    #     enabled: true
  roles:
    - role: ddclient_install
      when: install_ddclient
      tags: ddclient-install

    - role: certbot_install
      when: install_certbot
      tags: certbot-install

    - role: ubnt_install
      when: "'ubnt_servers' in group_names"
      tags: ubnt-install

    - role: cloudflare_tunnel
      when: "'cloudflared_nodes' in group_names"
      tags:
        - cloudflare-install
        - cf-install

    - role: traefik_install
      when:
        - "'cloudflared_nodes' in group_names"
        - install_traefik
      tags:
        - traefik-install
        - traefik-setup
        - traefik-cleanup
        - traefik-config

    - role: vault_install
      when: "'vault_servers' in group_names"
      vars:
        vault_certs: "{{ _olympus_v2['vault_hosts'] }}"
        vault_ca: "{{ _olympus_v2['hashi_cas'] }}"
      tags:
        - vault-install
        - vault-certs
        - vault-config
        - hashi-stack

    - role: consul_install
      vars:
        consul_certs: "{{ _olympus_v2['consul_hosts'] }}"
        consul_ca: "{{ _olympus_v2['hashi_cas'] }}"
        consul_encrypt_token: "{{ _olympus_v2['consul_hosts']['consul_secret'] }}"
      tags:
        - consul-install
        - consul-certs
        - consul-config
        - hashi-stack

    - role: nomad_install
      vars:
        nomad_certs: "{{ _olympus_v2['nomad_hosts'] }}"
        nomad_ca: "{{ _olympus_v2['hashi_cas'] }}"
        nomad_encrypt_token: "{{ _olympus_v2['nomad_hosts']['nomad_secret'] }}"
      tags:
        - nomad-install
        - nomad-certs
        - nomad-config
        - hashi-stack

  tags:
    - host-prep

- name: vault special tasks
  hosts: vault_servers
  gather_facts: true
  become: true
  handlers:
    - import_tasks: ./handlers/main.yml
  roles:
    - role: vault_init
      tags:
        - vault-init
        - never

    - role: vault_unseal
      tags:
        - vault-unseal
        - never
