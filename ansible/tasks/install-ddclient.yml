- name: ddclient | install packages only when the apt process is not locked
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 3600
    autoremove: true
    autoclean: true
  register: apt_action
  retries: 100
  until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
  loop:
    - unzip
    - net-tools
    - libio-socket-ssl-perl
    - libdata-validate-ip-perl

- name: ddclient | install packages only when the apt process is not locked
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 3600
    autoremove: true
    autoclean: true
  register: apt_action
  retries: 100
  until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
  loop:
    - ddclient={{ ddclient_version }}*
  when: ansible_facts['architecture'] == 'aarch64'

- name: ddclient | manual install
  block:
    - name: ddclient | test for binary
      ansible.builtin.stat:
        path: "{{ ddclient_path }}/ddclient"
      register: ddclient_binary
    - name: ddclient | download archive
      ansible.builtin.get_url:
        url: "{{ ddclient_repo_url }}/v{{ ddclient_version }}.tar.gz"
        dest: /tmp/ddclient-v{{ ddclient_version }}.tar.gz
      when: not ddclient_binary.stat.exists
    - name: ddclient | test for archive
      ansible.builtin.stat:
        path: /tmp/ddclient-v{{ ddclient_version }}.tar.gz
      register: ddclient_archive
    - name: ddclient | unpack archive
      ansible.builtin.unarchive:
        remote_src: true
        src: /tmp/ddclient-v{{ ddclient_version }}.tar.gz
        dest: "{{ ddclient_path }}"
        creates: "{{ ddclient_path }}/ddclient"
        extra_opts:
          - --strip=1
          - --no-anchored
          - ddclient
      when: ddclient_archive.stat.exists
    - name: ddclient | remove the archive
      ansible.builtin.file:
        path: /tmp/ddclient-v{{ ddclient_version }}.tar.gz
        state: absent
      when: ddclient_archive.stat.exists
    - name: ddclient | create config directory
      ansible.builtin.file:
        path: /etc/ddclient
        mode: 0755
        state: directory
  when: ansible_facts['architecture'] == 'x86_64'

- name: ddclient | Place configuration file
  ansible.builtin.template:
    src: "./templates/ddclient.j2"
    dest: "{% if ansible_facts['architecture'] == 'aarch64' %}/etc/ddclient.conf{% else %}/etc/ddclient/ddclient.conf{% endif %}"
    mode: 0600
  notify:
    - restart ddclient service

- name: ddclient | Place defaults file
  ansible.builtin.template:
    src: "./templates/ddclient-default.j2"
    dest: "/etc/default/ddclient"
    mode: 0644
  notify:
    - restart ddclient service

- name: ddclient | Place systemd unit file
  ansible.builtin.template:
    src: "./templates/ddclient-systemd.j2"
    dest: "/etc/systemd/system/ddclient.service"
    mode: 0644
  notify:
    - restart ddclient service
