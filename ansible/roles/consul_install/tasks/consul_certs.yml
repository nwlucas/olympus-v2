- name: show _consul_certs
  ansible.builtin.debug:
    var: _consul_certs
  when: consul_install_debug
  tags:
    - consul-certs

- name: is there a cluster key in _consul_certs?
  ansible.builtin.debug:
    var: _consul_certs['cluster'] is defined
  when:
    - consul_install_debug
    - inventory_hostname in _consul_certs['cluster']
  tags:
    - consul-certs

- name: is there a client key in _consul_certs?
  ansible.builtin.debug:
    var: _consul_certs['client'][consul_datacenter] is defined
  when: consul_install_debug
  tags:
    - consul-certs

- name: show _consul_ca
  ansible.builtin.debug:
    var: _consul_ca
  when: consul_install_debug
  tags:
    - consul-certs

- name: show cluster certs variable converted using dict2items
  ansible.builtin.debug:
    var: item | dict2items
  when:
    - inventory_hostname in _consul_certs['cluster']
    - consul_install_debug
    - _consul_certs['cluster'] is defined
    - _consul_certs['cluster'].keys()|length > 0
  loop:
    - "{{ _consul_certs['cluster'][inventory_hostname] }}"
  tags:
    - consul-certs

- name: show client certs variable
  ansible.builtin.debug:
    var: item
  when:
    - consul_install_debug
    - _consul_certs['client'] is defined
  loop:
    - "{{ _consul_certs['client'][consul_datacenter]['cert_private_key'] }}"
    - "{{ _consul_certs['client'][consul_datacenter]['cert_public_key'] }}"
  tags:
    - consul-certs

- name: write out consul node cluster cert and key
  ansible.builtin.copy:
    content: "{{ item.value['cert'] }}"
    dest: "{{ consul_config_path | dirname }}/certs/cluster/{{ item.value['filename'] }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0440
  loop: "{{ _consul_certs['cluster'][inventory_hostname] | dict2items }}"
  notify: restart consul services
  when:
    - inventory_hostname in groups['consul_servers']
    - _consul_certs['cluster'] is defined
    - _consul_certs['cluster'].keys()|length > 0
  tags:
    - consul-certs

- name: write out consul node client cert and key
  ansible.builtin.copy:
    content: "{{ item['cert'] }}"
    dest: "{{ consul_config_path | dirname }}/certs/client/{{ item['filename'] }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0440
  loop:
    - "{{ _consul_certs['client'][consul_datacenter]['cert_private_key'] }}"
    - "{{ _consul_certs['client'][consul_datacenter]['cert_public_key'] }}"
  notify: restart consul services
  when:
    - _consul_certs['client'] is defined
    - _consul_certs['client'].keys()|length > 0
    - _consul_certs['client'][consul_datacenter].keys()|length > 0
  tags:
    - consul-certs

- name: write out hashi ca
  ansible.builtin.copy:
    content: "{{ _consul_ca['bundle']['pub'] }}"
    dest: "{{ consul_config_path | dirname }}/certs/hashi_ca.pem"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0440
  when: _consul_ca['bundle'].keys()|length > 0
  notify: restart consul services
  tags:
    - consul-certs

- name: write out hashi intermediate ca
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ consul_config_path | dirname }}/certs/{{ item.filename }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0440
  loop:
    - content: "{{ _consul_ca['intermediate']['pub'] }}"
      filename: "consul_ca.pem"
    - content: "{{ _consul_ca['intermediate']['prv'] }}"
      filename: "consul_ca.key"
  when: _consul_ca['intermediate'].keys()|length > 0
  notify: restart consul services
  tags:
    - consul-certs
# - name: Force all notified handlers to run at this point, not waiting for normal sync points
#   meta: flush_handlers
