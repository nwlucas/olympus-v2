---
# tasks file for traefik_install

- name: "test if binary is already installed"
  ansible.builtin.stat:
    path: "{{ traefik_binary_path }}/traefik"
  register: traefik_proxy_binary
  tags:
    - "traefik-setup"

- name: "attempt to register the traefik binary version is already installed."
  ansible.builtin.command: "{{ traefik_binary_path }}/traefik version"
  register: traefik_proxy_binary_output
  changed_when: false
  when: traefik_proxy_binary.stat.exists
  tags:
    - "traefik-setup"

- name: set dicovered version of traefik
  ansible.builtin.set_fact:
    _discovered_version: "{{ traefik_proxy_binary_output.stdout_lines[0].split(' ')[1] | trim }}"
  when: traefik_proxy_binary.stat.exists
  tags:
    - "traefik-setup"

- name: ensure the binary directory exists
  ansible.builtin.file:
    path: "{{ traefik_binary_path }}"
    owner: "root"
    group: "root"
    mode: 0755
    state: directory
  when: traefik_binary_path != "/usr/local/bin"

- name: "set up traefik group"
  ansible.builtin.group:
    name: "{{ traefik_group }}"
    gid: "1021"
    system: true
    state: "present"
  tags:
    - "traefik-setup"

- name: "set up traefik user"
  ansible.builtin.user:
    name: "{{ traefik_user }}"
    comment: "Traefik User"
    group: "{{ traefik_group }}"
    uid: "1021"
    system: true
    shell: "/sbin/nologin"
    home: "{{ traefik_config_file | dirname }}"
    state: "present"
  tags:
    - "traefik-setup"

- name: "download the archive Traefik"
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ traefik_proxy['url'] }}/v{{ traefik_proxy['version'] }}/traefik_v{{ traefik_proxy['version'] }}_{{ ansible_facts['system'] | lower }}_amd64.tar.gz"
    dest: "{{ traefik_binary_path }}"
    owner: "{{ traefik_user }}"
    group: "{{ traefik_group }}"
    mode: "0555"
    extra_opts:
      - --no-anchored
      - traefik
  register: traefik_proxy_dl
  when:
    (ansible_facts['architecture'] == 'x86_64' and not traefik_proxy_binary.stat.exists)
    or (traefik_proxy_binary.stat.exists and ansible_facts['architecture'] == 'x86_64' and _discovered_version)
  tags:
    - "traefik-setup"

- name: "ensure traefik directories owned by traefik."
  ansible.builtin.file:
    path: "{{ item }}"
    recurse: false
    owner: "{{ traefik_user }}"
    group: "{{ traefik_group }}"
    mode: "0775"
    state: "directory"
  loop:
    - "{{ traefik_config_file | dirname }}"
    - "{{ traefik_config_file | dirname }}/configs"
    - "{{ traefik_config_file | dirname }}/logs"
  tags:
    - "traefik-setup"

- name: "ensure traefik certs directories owned by traefik."
  ansible.builtin.file:
    path: "{{ item }}"
    recurse: false
    owner: "{{ traefik_user }}"
    group: "{{ traefik_group }}"
    mode: "0744"
    state: "directory"
  loop:
    - "{{ traefik_config_file | dirname }}/certs"
  tags:
    - "traefik-setup"

- name: "ensure traefik log files exist."
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ traefik_user }}"
    group: "{{ traefik_group }}"
    mode: "0755"
    modification_time: "preserve"
    access_time: "preserve"
    state: "touch"
  loop:
    - "{{ traefik_config_file | dirname }}/logs/access.log"
    - "{{ traefik_config_file | dirname }}/logs/traefik.log"
  tags:
    - "traefik-setup"

- name: "setting environment variables"
  ansible.builtin.blockinfile:
    path: "/etc/default/traefik"
    block: |
      CF_DNS_API_TOKEN={{ cf_api_token }}
    insertbefore: BOF
    create: true
    owner: "{{ traefik_user }}"
    group: "{{ traefik_group }}"
    mode: "0644"
    state: "present"
  tags:
    - "traefik-setup"

- name: "create systemd unit for Traefik"
  ansible.builtin.template:
    src: "systemd/service.j2"
    dest: "/etc/systemd/system/{{ item['name'] }}"
    mode: "0644"
    owner: "root"
    group: "root"
  when: ansible_facts['os_family'] == 'Debian'
  loop:
    - "{{ traefik_proxy.service_unit }}"
  notify:
    - "restart traefik services"
  tags:
    - "traefik-setup"

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

- name: "create path unit for Traefik"
  ansible.builtin.template:
    src: "systemd/path.j2"
    dest: "/etc/systemd/system/{{ item['name'] }}"
    mode: "0644"
    owner: "root"
    group: "root"
  when: ansible_facts['os_family'] == 'Debian'
  loop:
    - "{{ traefik_proxy.path_unit }}"
  notify:
    - reload systemd
  tags:
    - "traefik-setup"

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

- name: "setting systemd read of envrionment variable"
  ansible.builtin.blockinfile:
    path: "/etc/systemd/system/{{ traefik_proxy['service_unit']['name'] }}.d/10-environment.conf"
    block: |
      [Service]
      EnvironmentFile=-/etc/default/traefik
    insertbefore: BOF
    create: true
    owner: root
    group: root
    mode: "0644"
    state: present
  when: ansible_facts['os_family'] == 'Debian'
  notify:
    - "restart traefik services"
  tags:
    - "traefik-setup"

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

- name: "ensure services are enabled and started"
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    state: started
    daemon_reload: true
    enabled: true
  when: ansible_facts['os_family'] == 'Debian'
  notify:
    - reload systemd
  loop:
    - "{{ traefik_proxy.service_unit }}"
    - "{{ traefik_proxy.path_unit }}"
  tags:
    - "traefik-setup"
