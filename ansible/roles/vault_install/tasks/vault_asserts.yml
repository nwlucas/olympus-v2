# Various assertions that are smart for this role
#
#
---
- name: define supported *nix distributions
  ansible.builtin.set_fact:
    _vault_nix_distros:
      # - "RedHat"
      # - "CentOS"
      # - "OracleLinux"
      # - "Fedora"
      # - "Debian"
      # - "FreeBSD"
      # - "SmartOS"
      - "Ubuntu"
      # - "Archlinux"
      # - "Alpine"
      # - "Amazon"
      # - "Flatcar"

- name: define supported *nix arch
  ansible.builtin.set_fact:
    _vault_nix_archs:
      # - "RedHat"
      # - "CentOS"
      # - "OracleLinux"
      # - "Fedora"
      # - "Debian"
      # - "FreeBSD"
      - "x86_64"
      - "aarch64"
      # - "darwin"
      # - "Alpine"
      # - "Amazon"
      # - "Flatcar"

- name: check distribution compatibility
  ansible.builtin.fail:
    msg: "{{ ansible_facts['distribution'] }} is not currently supported by this role."
  when:
    - ansible_facts['distribution'] not in _vault_nix_distros
    - ansible_facts['os_family'] != 'Windows'

- name: check architecture compatibility
  ansible.builtin.fail:
    msg: "{{ ansible_facts['architecture'] }} is not currently supported by this role."
  when:
    - ansible_facts['architecture'] not in _vault_nix_archs
    - ansible_facts['os_family'] != 'Windows'

- name: check for invalid vault version
  ansible.builtin.fail:
    msg: "Invalid vault version"
  when:
    - vault_version is not version('0.1.0', operator='ge', version_type='semantic')
