locals {
  nc_node = defaults(var.nc_node, {
    prefix = "nc"
    spec   = "generic"
  })

  nc_nodes_fqdn = [for n in random_id.nc_nodes : format("%s-%s.%s", lower(local.nc_node["prefix"]), lower(n.id), lower(local.droplet_specs["generic"].dns_zone))]
}

resource "random_id" "nc_nodes" {
  count = var.node_count

  byte_length = 8
}

data "cloudinit_config" "nc_node" {
  count = var.node_count

  gzip          = false
  base64_encode = false
  part {
    content_type = "text/cloud-config"
    merge_type   = "list(append)+dict(no_replace,recurse_list)+str()"
    filename     = "base.yaml"
    content = templatefile(
      "${path.module}/../templates/cloud-init/base-config-cloud.tpl", {
        instance_fqdn    = local.nc_nodes_fqdn[count.index]
        instance_domain  = lower(local.droplet_specs["generic"].dns_zone)
        ssh_password     = var.SSH_PASSWORD
        ssh_instance_key = tls_private_key.ssh_key.public_key_openssh
      }
    )
  }
  part {
    content_type = "text/cloud-config"
    merge_type   = "list(append)+dict(no_replace,recurse_list)+str()"
    filename     = "certbot.yaml"
    content = templatefile(
      "${path.module}/../templates/cloud-init/certbot.tpl", {
        instance_fqdn = local.nc_nodes_fqdn[count.index]
        cf_token      = var.CF_API_TOKEN
        le_email      = var.ACME_EMAIL
      }
    )
  }
  part {
    content_type = "text/cloud-config"
    merge_type   = "list(append)+dict(no_replace,recurse_list)+str()"
    filename     = "provisioning.yaml"
    content      = <<-EOT
    #cloud-config
    write_files:
    - content: |
        export NODE_NAME="${local.nc_nodes_fqdn[count.index]}"
        export NODE_TYPE="NOMAD-CONSUL"
        export DO_API_TOKEN="${var.DIGITALOCEAN_API_TOKEN}"

      path: /etc/profile.d/provisioning.sh
      owner: root:root
      permissions: '0755'
    EOT
  }
  part {
    content_type = "text/cloud-config"
    merge_type   = "list(append)+dict(no_replace,recurse_list)+str()"
    filename     = "final.yaml"
    content = templatefile(
      "${path.module}/../templates/cloud-init/final-config-cloud.tpl", {
      }
    )
  }
}

resource "digitalocean_droplet" "nc_nodes" {
  count = var.node_count

  image     = local.droplet_specs["generic"].image
  name      = local.nc_nodes_fqdn[count.index]
  region    = local.droplet_specs["generic"].region
  size      = local.droplet_specs["generic"].size
  backups   = true
  ssh_keys  = [digitalocean_ssh_key.tf_ssh.fingerprint]
  user_data = data.cloudinit_config.nc_node[count.index].rendered
  vpc_uuid  = digitalocean_vpc.nc_internal.id
  tags = [
    "nomad-server",
    "consul-server",
    format("%s:consul-server", local.droplet_specs["generic"].region),
    lower(local.droplet_specs["generic"].region),
    format("%s-%s", lower(local.nc_node["prefix"]), lower(random_id.nc_nodes[count.index].id))
  ]

  lifecycle {
    create_before_destroy = true
  }
}

resource "digitalocean_firewall" "nomad-consul" {
  name = "fw-nomad-consul"

  tags = [format("%s:consul-server", local.droplet_specs["generic"].region)]

  #--------------------------------------------------------------------------#
  # Internal VPC Rules. We have to let ourselves talk to each other          #
  #--------------------------------------------------------------------------#
  inbound_rule {
    protocol         = "tcp"
    port_range       = "1-65535"
    source_addresses = [digitalocean_vpc.nc_internal.ip_range]
  }

  inbound_rule {
    protocol         = "udp"
    port_range       = "1-65535"
    source_addresses = [digitalocean_vpc.nc_internal.ip_range]
  }

  inbound_rule {
    protocol         = "icmp"
    source_addresses = [digitalocean_vpc.nc_internal.ip_range]
  }

  outbound_rule {
    protocol              = "udp"
    port_range            = "1-65535"
    destination_addresses = [digitalocean_vpc.nc_internal.ip_range]
  }

  outbound_rule {
    protocol              = "tcp"
    port_range            = "1-65535"
    destination_addresses = [digitalocean_vpc.nc_internal.ip_range]
  }

  outbound_rule {
    protocol              = "icmp"
    destination_addresses = [digitalocean_vpc.nc_internal.ip_range]
  }
  #--------------------------------------------------------------------------#
  # Selective Inbound Traffic Rules                                         #
  #--------------------------------------------------------------------------#
  dynamic "inbound_rule" {
    for_each = var.nc_fw_rules_inbound
    content {
      protocol         = inbound_rule.value["protocol"]
      port_range       = inbound_rule.value["port_range"]
      source_addresses = inbound_rule.value["source_addresses"]
    }
  }
  #--------------------------------------------------------------------------#
  # Selective Outbound Traffic Rules                                         #
  #--------------------------------------------------------------------------#
  dynamic "outbound_rule" {
    for_each = var.nc_fw_rules_outbound
    content {
      protocol              = outbound_rule.value["protocol"]
      port_range            = outbound_rule.value["port_range"]
      destination_addresses = outbound_rule.value["destination_addresses"]
    }
  }
}

module "cf_nc_nodes" {
  count  = var.node_count
  source = "git::https://gitlab.com/olympus-net/terraform_modules/cloudflare.git"

  zone        = lower(local.droplet_specs["generic"].dns_zone)
  record_type = "A"
  record = {
    "name"    = format("%s-%s", lower(local.nc_node["prefix"]), lower(random_id.nc_nodes[count.index].id))
    "content" = digitalocean_droplet.nc_nodes[count.index].ipv4_address_private
  }
}
